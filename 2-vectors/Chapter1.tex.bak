
\documentclass[xcolor=dvipsnames, xcolor=table]{beamer} % Classe de documento para apresentações

\usepackage{listings}\usetheme{Berlin}
\usecolortheme{beaver}
\usepackage{textpos}
\usepackage{color}
\usepackage{wasysym}
\renewcommand\tabcolsep{4pt}
\usepackage{csquotes} 
\usepackage{wrapfig}
\usepackage{microtype}
\usepackage[labelfont=bf]{caption}
\usepackage{epigraph}
\usepackage[english]{babel}
\usepackage{float}
\usepackage{hyperref}
%\hypersetup{colorlinks=true,linkcolor=blue}
\usepackage{amsmath}
\newcommand{\dd}[1]{\mathrm{d}#1}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{graphicx}
\usepackage{mathtools}

\usepackage{booktabs}

\usepackage{adjustbox}
\hypersetup{pdfpagemode=FullScreen} % para o pdf abrir automaticamente em modo full screen
\setbeamertemplate{caption}[numbered] % para numerar as tabelas
\usepackage{subcaption}
\usepackage[none]{hyphenat} 
\usepackage{bm} %%% bold vectors
\usepackage{tabularx}  
\usepackage{tikz}

\setbeamercolor{author in head/foot}{fg=Maroon}     % cor do nome do autor no rodape
\setbeamercolor{institute in head/foot}{fg=Maroon}  % cor do nome do ISEG no rodape
\setbeamercolor{frametitle}{fg=Maroon, bg=black!9} % cor da letra e do fundo fa faixa com o nome de cada slide
\setbeamercolor{caption name}{fg=Maroon, bg=black!9}
\setbeamercolor*{title}{fg=white, bg=Maroon}          % cor do titulo e da caixa de titulo na capa
\setbeamercolor{itemlist item}{fg=Maroon}               % cor dos bullets do ambiente \itemlist 

\setbeamertemplate{section in toc}[circle]
\setbeamercolor{section number projected}{bg=Maroon,fg=white}
\setbeamercolor{subsection number projected}{bg=Maroon,fg=white}

\setbeamercolor{block title}{fg=Maroon} % color of enumerated items
\setbeamercolor{local structure}{fg=Maroon} % color of enumerated items


\makeatletter % criaçao de um ambiente sem TOC no cabeçalho do slide
\newenvironment{noheadline}{
\setbeamertemplate{headline}{}
\addtobeamertemplate{frametitle}{\vspace*{-0.9\baselineskip}}{}
}{}
\makeatother

\usepackage[beamer,customcolors]{hf-tikz}

\tikzset{hl/.style={
    set fill color=red!80!black!40,
    set border color=red!80!black,
  },
}


\title[Operations and Vetores]{Operations and Vetores}
\author[João Vieira \& Pedro Fonseca]{\textbf {João Vieira \& Pedro Fonseca}}
\titlegraphic{\includegraphics[width=1.5cm]{yes}}
\institute[Introduction to R Programming]{\textbf {Introduction to R Programming}}
\date{\today}


% position the yes
\addtobeamertemplate{frametitle}{}{%
\begin{textblock*}{100mm}(.85\textwidth,-.9cm)
\includegraphics[scale=.05]{yes}
\end{textblock*}}



%%%%%%%%%%%%% Ambiente de teorema/definição com as cores do ISEG %%%%%%

\makeatletter
\def\th@mystyle{%
    \normalfont % body font
    \setbeamercolor{block title example}{bg=Maroon,fg=white}
    \setbeamercolor{block body example}{bg=black!9,fg=black}
    \def\inserttheoremblockenv{exampleblock}
  }
\makeatother
\theoremstyle{mystyle}
\newtheorem*{defi}{Definição}

\setbeamertemplate{defis}[numbered]



%%%%%%%%%%%%%%%% Bibliografia %%%%%%%%%%%%%%%%%%%%%%%

\usepackage{url}
\usepackage[style=authoryear, bibencoding=utf8, minnames=1, maxnames=3,
maxbibnames=99,backref=true, natbib=true, dashed=false, terseinits=true, 
firstinits=true, uniquename=false, uniquelist=true, labeldate=true, 
doi=false, isbn=false, natbib=true, backend=biber]{biblatex}
\DefineBibliographyStrings{english}{%
    backrefpage = {Cited on page},
    backrefpages = {Cited on pages},
}
% Change the default formatting to be more "statistical"
\DeclareFieldFormat{url}{\url{#1}}
\DeclareFieldFormat[article]{pages}{#1}
\DeclareFieldFormat[inproceedings]{pages}{\lowercase{pp.}#1}
\DeclareFieldFormat[incollection]{pages}{\lowercase{pp.}#1}
\DeclareFieldFormat[article]{volume}{\mkbibbold{#1}}
\DeclareFieldFormat[article]{number}{\mkbibparens{#1}}
\DeclareFieldFormat[article]{title}{\MakeCapital{#1}}
\DeclareFieldFormat[article]{url}{}
\DeclareFieldFormat[book]{url}{}
\DeclareFieldFormat[inbook]{url}{}
\DeclareFieldFormat[incollection]{url}{}
\DeclareFieldFormat[inproceedings]{url}{}
\DeclareFieldFormat[inproceedings]{title}{#1}
\DeclareFieldFormat{shorthandwidth}{#1}
% No dot before number of articles
\usepackage{xpatch}
\xpatchbibmacro{volume+number+eid}{\setunit*{\adddot}}{}{}{}
% Remove In: for an article.
\renewbibmacro{in:}{%
  \ifentrytype{article}{}{%
  \printtext{\bibstring{in}\intitlepunct}}}
% Get rid of months in citations
\AtEveryBibitem{\clearfield{month}}
\AtEveryCitekey{\clearfield{month}}
\setlength{\parindent}{1,3cm}
\raggedbottom

\renewcommand\bibfont{\scriptsize}
% If you have more than one page of references, you want to tell beamer
% to put the continuation section label from the second slide onwards
\setbeamertemplate{frametitle continuation}[from second]
% Now get rid of all the colours
\setbeamercolor*{bibliography entry title}{fg=black}
\setbeamercolor*{bibliography entry author}{fg=black}
\setbeamercolor*{bibliography entry location}{fg=black}
\setbeamercolor*{bibliography entry note}{fg=black}



\begin{document}
%%%%%%%%%%%%%%%%%%%%%  CAPA  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{noheadline}

\begin{frame}%[plain]
\vfill
\centering

\begin{beamercolorbox}[sep=8pt,center,colsep=-4bp,rounded=true,shadow=true]{title}
\usebeamerfont{title}\inserttitle\par%
\ifx\insertsubtitle\@empty%
\else%
\vskip0.25em%
{\usebeamerfont{subtitle}\usebeamercolor[fg]{subtitle}\insertsubtitle\par}%
\fi%     
\end{beamercolorbox}%

\vskip1em\par

\begin{beamercolorbox}[sep=8pt,center,colsep=-4bp,rounded=true,shadow=true]{author}
\usebeamerfont{author}\insertauthor
\end{beamercolorbox}

{\usebeamercolor[fg]{titlegraphic}\inserttitlegraphic\par}

\begin{beamercolorbox}[sep=8pt,center,colsep=-4bp,rounded=true,shadow=true]{institute}
\usebeamerfont{institute}\insertinstitute
\end{beamercolorbox}

\begin{beamercolorbox}[sep=8pt,center,colsep=-4bp,rounded=true,shadow=true]{date}
\usebeamerfont{date}\insertdate
\end{beamercolorbox}\vskip0.5em

\end{frame}
\end{noheadline}



%%%%%%%%%%%%%% itemlist SHAPES AND COLLERS%%%%%%%%%%%%%%%%%%%%%%%%%

\setbeamertemplate{itemize item}{\color{Maroon}\newmoon}
\setbeamertemplate{itemize subitem}{\color{Maroon}$\blacktriangleright$}

%%%%%%%%% TABLE OF CONTENTS SHAPES, COLLORS AND BULLETS %%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{noheadline}

\begin{frame}[allowframebreaks]
	\frametitle{Contents}
    \tableofcontents[hideallsubsections]
\end{frame}

\end{noheadline}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Arithmetic and Functions}

\subsection{Arithmetic}

\begin{frame}[fragile] %%%%%%%%%%%%%%%%%%%%%%% FRAME %%%%%%%%%%%%%%%%%%%%%%%%%%%%
\frametitle{R as a Calculator}

\begin{itemize}

\item Mathematical operations follow the conventional order: parentheses, exponents, multiplication, division, addition, subtraction. Examples:

\begin{verbatim}
> 2+3 
[1] 5

> 14/6
[1] 2.333333 

> 14/6+5
[1] 7.333333

\end{verbatim}
\end{itemize}

\end{frame}

\begin{frame}[fragile] %%%%%%%%%%%%%%%%%%%%%%% FRAME %%%%%%%%%%%%%%%%%%%%%%%%%%%%
\frametitle{R as a Calculator}

\begin{itemize}

\item Mathematical operations follow the conventional order: parentheses, exponents, multiplication, division, addition, subtraction. Examples:

\begin{verbatim}

> 14/(6+5)
[1] 1.272727

> 3^2
[1] 9
\end{verbatim}
\end{itemize}

\end{frame}

\begin{frame}
\frametitle{A Useful Shortcut}
\begin{itemize}
\item Tip: Try sending code to the console with the shortcut:

\begin{itemize}
\item control+enter on Windows and Linux
\item cmd+return on Mac
\end{itemize}

\item To see a list of Rstudio shortcuts try:

\begin{itemize}
\item Alt+Shift+K on windows and linux
\item Option+Shift+K on Mac
\end{itemize}

\item Alternative: click \href{https://support.rstudio.com/hc/en-us/articles/200711853-Keyboard-Shortcuts}{\textcolor{blue}{here}}.

\end{itemize}
\end{frame}

\subsection{Functions}

\begin{frame}[fragile]
\frametitle{Calling a Function}

\begin{itemize}
\item R has a large collection of built-in functions that can be called like this:

\begin{verbatim}
> function_name(arg1 = val1, arg2 = val2, ...)
\end{verbatim}

\begin{itemize}
\item Some arguments are mandatory. 
\item Some arguments are optional and have default values.
\item Argument names are not mandatory. 
\item If you don't provide the names of the arguments, you must input the arguments in the correct order.
\item As long as the argument's names are provided, the order is irrelevant.
\item Help pages can be useful.

\end{itemize}
\end{itemize}

\end{frame}

\begin{frame}[fragile] %%%%%%%%%%%%%%%%%%%%%%% FRAME %%%%%%%%%%%%%%%%%%%%%%%%%%%%
\frametitle{Getting Help}

\begin{itemize}

\item If you don't know what a functions does just put \,"?"\, before the name of the function and send it to R's console. 

\item In the help page a function you can find:

\begin{itemize}
\item Its arguments and respective admissible values
\item The interpretation of its output
\item Examples
\item Related functions
\end{itemize}

\begin{verbatim}
> ?mean
> ?library
> ?sqrt
\end{verbatim}

\end{itemize}

\end{frame}

\begin{frame}[fragile]
\frametitle{Exponentials}

\subsection{Some examples of functions}

\begin{itemize}
\item The exponential function is given by \textit{exp()}.

\begin{verbatim}
> exp(x=3)
[1] 20.08554
\end{verbatim}

\item When R prints large (or small) numbers beyond (or below) a certain threshold of digits ($7$ by default) it uses the e-notation.

\begin{verbatim}
> 2342151012900
[1] 2.342151e+12

> 0.0000002533
[1] 2.533e-07
\end{verbatim}

\end{itemize}

\end{frame}

\begin{frame}[fragile] %%%%%%%%%%%%%%%%%%%%%%% FRAME %%%%%%%%%%%%%%%%%%%%%%%%%%%%
\frametitle{Square Roots and Logarithms}

\begin{itemize} 
\item Square roots can be calculated with the \textit{sqrt} function.

\begin{verbatim}
> sqrt(x = 9)
\end{verbatim}

\item Logarithms can be calculated with the \textit{log()} function.
\begin{verbatim}
> log(x = 243, base = 3)
[1] 5
\end{verbatim}

\item The \textit{base} argument is optional. The default value is $e$.
\begin{verbatim}
> log(x = 243)
[1] 5.493061
\end{verbatim}
\end{itemize}

\end{frame}
\begin{frame}[fragile] %%%%%%%%%%%%%%%%%%%%%%% FRAME %%%%%%%%%%%%%%%%%%%%%%%%%%%%
\frametitle{Logarithms}
\begin{verbatim}

> log(243, exp(1))
[1] 5.493061

> log(exp(1), 243)
[1] 0.1820478

> log(base = exp(1), x = 243)
[1] 5.493061

\end{verbatim}

{\raggedright Tip: try}

\begin{verbatim}
> ?log
\end{verbatim}

\end{frame}

\begin{frame}[fragile] %%%%%%%%%%%%%%%%%%%%%%% FRAME %%%%%%%%%%%%%%%%%%%%%%%%%%%%
\frametitle{Logarithms}

\begin{verbatim}
> log(x = 243, base = exp(1))
[1] 5.493061

> log10(5)
[1] 0.69897

> 2^log2(6)
[1] 6

> 10^log10(5)+1
[1] 6
\end{verbatim}

\end{frame}

\section{Assignment}

\subsection{Assigning values to objects}

\begin{frame}[fragile] %%%%%%%%%%%%%%%%%%%%%%% FRAME %%%%%%%%%%%%%%%%%%%%%%%%%%%%
\frametitle{The Assignment Operator}

\begin{itemize}

\item To store values in R's memory you need to assign them to objects. You can use the \textit{equal sign}, the \textit{assign} function, or \textit{assign} operator:

\item The assignment operator is typically recommended. The equal sign should be reserved to provide arguments to functions. \\

\begin{verbatim}
> object_name_1 <- 5
> object_name_1
[1] 5

> object_name_2 <- log(object_name_1) + exp(5)
> object_name_2
[1] 150.0226
\end{verbatim}

\end{itemize}

\end{frame}

\begin{frame}
\frametitle{The Assignment Operator}

\includegraphics[scale=.22]{meme.jpg}

\end{frame}

\begin{frame}[fragile] %%%%%%%%%%%%%%%%%%%%%%% FRAME %%%%%%%%%%%%%%%%%%%%%%%%%%%%
\frametitle{The Assignment Operator}

\begin{figure}
\includegraphics[scale=.19]{objects.png}
\caption{Stored objects are visible in the upper-right pane, under the "Environment" tab}
\end{figure}

\end{frame}

\begin{frame}%%%%%%%%%%%%%%%%%%%%%%% FRAME %%%%%%%%%%%%%%%%%%%%%
\frametitle{The Assignment Operator}

\begin{itemize}

\item Rstudio's keyboard shortcut for the assign operator is:
\begin{itemize}
\item "Alt" + "$-$" on Windows and Linux
\item "Option" + "$-$" on MacOS
\end{itemize}  

\end{itemize}

\end{frame}

\begin{frame}[fragile]%%%%%%%%%%%%%%%%%%%%%%% FRAME %%%%%%%%%%%%%%%%%%%%%
\frametitle{Delete Objects}

\begin{itemize}

\item To delete stored objects use the \textit{rm} function:

\begin{verbatim}
> rm(object_name_1)
> object_name_1
Error: object 'object_name_1' not found
\end{verbatim}

\item You can input as many objects as you want to \textit{rm}

\item To remove all stored objects all once, use the following  command:

\begin{verbatim}
> rm(list = ls())
\end{verbatim}

\end{itemize}

\end{frame}

\begin{frame}[fragile]%%%%%%%%%%%%%%%%%%%%%%% FRAME %%%%%%%%%%%%%%%%%%%%%
\frametitle{Case Matters}

\begin{verbatim}
> pi
[1] 3.141593

> r_rocks <- 2 * pi^2
> r_rocks
[1] 19.73921

> r_Rocks
Error: object 'r_Rocks' not found
\end{verbatim}

\end{frame}

\begin{frame}[fragile]%%%%%%%%%%%%%%%%%%%%%%% FRAME %%%%%%%%%%%%%%%%%%%%%
\frametitle{How to Print an Assignment}

\begin{itemize}
\item If you make an assignment, you don't get to see the assigned value. You're then tempted to double-check the result:

\begin{verbatim}
> y <- seq(from = 1, 10, length.out = 5)
> y
[1]  1.00  3.25  5.50  7.75 10.00
\end{verbatim}

\item This common action can be shortened by surrounding the assignment with parentheses, which causes assignments to print:

\begin{verbatim}
> (seq(from = 1, 10, length.out = 5))
[1]  1.00  3.25  5.50  7.75 10.00
\end{verbatim}

\end{itemize}

\end{frame}

\begin{frame}[fragile] %%%%%%%%%%%%%%%%%%%%%%% FRAME %%%%%%%%%%%%%%%%%%%%%%%%%%%%
\frametitle{Naming Objects}
\begin{itemize}

\item Object names must start with a letter and can only contain letters, numbers, underscores and dots. You want your object names to be short, descriptive and consistent. Ideally, one should follow a convention:
\begin{verbatim}
i_use_snake_case
otherPeopleUseCamelCase
some.people.use.periods
And_aFew.People_RENOUNCEconvention
\end{verbatim}
\end{itemize}

\end{frame}

\begin{frame}[fragile] %%%%%%%%%%%%%%%%%%%%%%% FRAME %%%%%%%%%%%%%%%%%%%%%
\frametitle{Examples:}
\begin{verbatim}
> x <- -5
> x
[1] -5

> x <- x + 1 # this overwrites the previous value of x
> x
[1] -4

> (y <- 10)
[1] 10

> (z <- y * x)
[1] -40
\end{verbatim}

\end{frame}

\section{Vectors}
\subsection{Creating Vectors}


\begin{frame}[fragile] %%%%%%%%%%%%%%%%%%%%%%% FRAME %%%%%%%%%%%%%%%%%%%%%%%%%%%%

\frametitle{The \textit{c} Operator}

\begin{itemize}
\item Vectors are essential building blocks for handling multiple items in R.  
\item To create vectors use the \textit{combine} operator (c):
\begin{verbatim}
> (myvec <- c(1, 3, 1, 42))
[1] 1 3 1 42

> (myvec2 <- c(myvec, x, y ,z))
[1]   1   3   1  42  -5  10 -50

> (myvec3 <-  c(myvec, 1, 2))
[1] 1 3 1 42 1 2
\end{verbatim}

\end{itemize}

\end{frame}

\subsection{Indexing, Subsetting and Substitution}


\begin{frame}[fragile] %%%%%%%%%%%%%%%%%%%%%%% FRAME %%%%%%%%%%%%%%%%%%%%%%%%%%%%
\frametitle{Subsetting}

\begin{itemize}
\item Get the first element:

\begin{verbatim}
> myvec[1]
[1] 1
\end{verbatim}

\item Get the second element:

\begin{verbatim}
> myvec[2]
[1] 3
\end{verbatim}

\end{itemize}

\end{frame}


\begin{frame}[fragile] %%%%%%%%%%%%%%%%%%%%%%% FRAME %%%%%%%%%%%%%%%%%%%%%%%%%%%%
\frametitle{Subsetting}
\begin{itemize}
\item Get the first three elements:
\begin{verbatim}
> myvec[1:3]
[1] 1 3 1
\end{verbatim}
\item Omit the first element:
\begin{verbatim}
> myvec[-1]
[1] 3 1 42
\end{verbatim}
\item Omit more than one element:
\begin{verbatim}
> myvec[-c(1,2)]
[1] 1 42
\end{verbatim}

\end{itemize}

\end{frame}

\begin{frame}[fragile] %%%%%%%%%%%%%%%%%%%%%%% FRAME %%%%%%%%%%%%%%%%%%%%%%%%%%%%

\frametitle{Overwriting}

\begin{itemize}

\item Substitute an element:
\begin{verbatim}
> myvec[3] <- 6
> myvec
[1] 1  3  6 42
\end{verbatim}

\item Substitute more than one element:
\begin{verbatim}
> myvec[c(2,3,4)] <- c(2,3,4)
> myvec
[1] 1  2  3 4
\end{verbatim}
\end{itemize}

\end{frame}

\subsection{Some useful functions}

\begin{frame}[fragile] %%%%%%%%%%%%%%%%%%%%%%% FRAME %%%%%%%%%%%%%%%%%%%%%%%%%%%%
\frametitle{Functions to Generate Vectors}
\begin{itemize}

\item Different ways to make a sequence:

\begin{verbatim}
> 1:10
[1] 1 2 3 4 5 6 7 8 9 10

> 5:1
[1] 5 4 3 2 1

> seq(1, 10)
[1] 1 2 3 4 5 6 7 8 9 10

> seq(from = 18, to = 27, by = 3)
[1] 18 21 24 27
\end{verbatim}

\end{itemize}

\end{frame}



\begin{frame}[fragile] %%%%%%%%%%%%%%%%%%%%%%% FRAME %%%%%%%%%%%%%%%%%%%%%%%%%%%%
\frametitle{Functions to Generate Vectors}

\begin{verbatim}
> rep(x = 1, times = 4)
[1] 1 1 1 1

> rep(c(3, 6), times = 3)
[1] 3 6 3 6 3 6

> rep(c(3, 62, 8.3), each = 2)
[1]  3.0  3.0 62.0 62.0  8.3  8.3

> rep(c(3, 6), times = 3, each = 2)
[1] 3 3 6 6 3 3 6 6 3 3 6 6
\end{verbatim}



\end{frame}


\begin{frame}[fragile] %%%%%%%%%%%%%%%%%%%%%%% FRAME %%%%%%%%%%%%%%%%%%%%%%%%%%%%
\frametitle{Sorting the Elements of a Vector}
\begin{itemize}
\item Sorting a vector in increasing or decreasing order: 
\begin{verbatim}
> myvec2 <- c(1, 3, 1, 42, -5, 10, -50)
> myvec2
[1]   1   3   1  42  -5  10 -50

> sort(myvec2)
[1] -50  -5   1   1   3  10  42

> sort(myvec2, decreasing = TRUE)
[1]  42  10   3   1   1  -5 -50

\end{verbatim}

\end{itemize}



\end{frame}

\begin{frame}[fragile] %%%%%%%%%%%%%%%%%%%%%%% FRAME %%%%%%%%%%%%%%%%%%%%%%%%%%%%
\frametitle{Sorting the Elements of a Vector}
\begin{verbatim}

> sort(c(2.5, -1, -10, 3.44))
[1] -10.00  -1.00   2.50   3.44

> sort(c(2.5,-1,-10,3.44), decreasing = TRUE)
[1]   3.44   2.50  -1.00 -10.00

> sort(c(2.5,-1,-10,3.44), TRUE)
[1]   3.44   2.50  -1.00 -10.00
\end{verbatim}

\end{frame}

\begin{frame}[fragile]
\frametitle{Some Statistical Functions}
\begin{itemize}
\item \textit{rnorm(n)} generates $n$ pseudo-random numbers from a normal distribution (default: $\mu = 0$, $\sigma = 1$)

\begin{verbatim}
> rnorm(3)
[1] -0.5604756 -0.2301775  1.5587083
> rnorm(4, mean =  5, sd = 2)
 [1] 5.1865810 5.6658985 3.8355640 0.8719963 
\end{verbatim}

\item  Other functions related do the normal distribution: \textit{dnorm} (density), \textit{pnorm} (distribution function), \textit{qnorm} (quantile function).
\item Equivalent functions are available for the most commonly used probability distributions: F, t-student, Uniform, Poisson...
\end{itemize}

\end{frame}

\begin{frame}[fragile]
\frametitle{The set.\textit{seed} Function}
\begin{itemize}
\item  Functions like \textit{rnorm}, \textit{rpois} and \textit{runif} generate pseudo-random numbers. This means that you and I will get different results when using these functions. Solution: use the \textit{set.seed} function.
\item Try this command many times: 

\begin{verbatim}
> rnorm(2) 
\end{verbatim}

\item Each time you will get a different output. Now try this:

\begin{verbatim}
> set.seed(123)
> rnorm(2)
\end{verbatim}

\item You will get the  same output every time.
\item The argument of \textit{set.seed} is irrelevant as long as we all use the same value.
\end{itemize}

\end{frame}

\section{Vectorized Operations}

\subsection{Introduction}

\begin{frame}
\frametitle{Main Ideas}

\begin{itemize}
\item One of the main advantages of R is vectorized calculation. This means that:

\begin{itemize}
\item Most R functions accept vectors as inputs;
\item Vector arithmetic is performed element-wise by default.
\end{itemize}

\item Vectorization calculation is a huge advantage efficiency and parsimony.
\item Vectorization also makes code easier to write and read.

\end{itemize}

\end{frame}

\subsection{Vectorized Operations}

\begin{frame}[fragile]
\frametitle{Examples}

\begin{verbatim}
> x <- c(1, 2, 3)
> y <- c(0.5, 0.5, 0.5)

> 1/x
[1] 1.0000000 0.5000000 0.3333333

> 3+y
[1] 3.5 3.5 3.5

> x+y
[1] 1.5 2.5 3.5
\end{verbatim}

\end{frame}

\begin{frame}[fragile]
\frametitle{Examples}

\begin{verbatim}
> x <- c(1, 2, 3)
> y <- c(0.5, 0.5, 0.5)

> x^y
[1] 1.000000 1.414214 1.732051
> sqrt(x)
[1] 1.000000 1.414214 1.732051
> 1/1:3
[1] 1.0000000 0.5000000 0.3333333
> seq(from = 2, to = 6, by = 2)/2
[1] 1 2 3
\end{verbatim}

\end{frame}

\begin{frame}[fragile]
\frametitle{Examples}

\begin{verbatim}
> x1 <- c(1, 5, 7)
> x2 <- rep(1, times = 3)

> log(x1)
[1] 0.000000 1.609438 1.945910

> log(x1) - x2
[1] -1.0000000  0.6094379  0.9459101

> x <- x1 + x2
> x
[1] 2 6 8
\end{verbatim}

\end{frame}

\begin{frame}[fragile]
\frametitle{Rounding}

\begin{itemize}
\item \textit{round()} rounds the values in its first argument to the specified number of decimal places (default 0).


\begin{verbatim}
> set.seed(123)

> z <- rnorm(3)
> z
[1] -0.5604756 -0.2301775  1.5587083

> round(z, digits = 3)
[1] -0.560 -0.230  1.559

> round(z)
[1] -1  0  2

\end{verbatim}

\end{itemize}

\end{frame}

\begin{frame}[fragile]
\frametitle{Rounding}

\begin{verbatim}

> y <- c(3.271109, 3.374961, 2.313307, 4.837787)

> round(y, 2)
[1] 3.27 3.37 2.31 4.84
\end{verbatim}

\end{frame}

\begin{frame}[fragile]
\frametitle {Statistical Functions}
\begin{verbatim}
> z
[1] -0.5604756 -0.2301775  1.5587083

> abs(z) # Absolut value
[1] 0.5604756 0.2301775 1.5587083

> max(z)
[1] 1.558708

> min(z)
[1] -0.5604756

\end{verbatim}

\end{frame}

\begin{frame}[fragile]
\frametitle {Statistical Functions}

\begin{verbatim}
> z
[1] -0.5604756 -0.2301775  1.5587083

> mean(z)
[1] 0.2560184

> median(z)
[1] -0.2301775

> sd(z)
[1] 1.140186

\end{verbatim}

\end{frame}

\begin{frame}[fragile]
\frametitle{Statistical Functions}

\begin{verbatim}
> z
[1] -0.5604756 -0.2301775  1.5587083

> var(z)
[1] 1.300025

> sum(z)          
[1] 0.7680552

> quantile(z, 0.5)
       50% 
-0.2301775   
\end{verbatim}

\end{frame}
\begin{frame}[fragile]
\frametitle{The \textit{which} Function}

\begin{itemize}
\item The \textit{which} function is useful to find which elements of a vector that verify a given condition:

\begin{verbatim}
> set.seed(123)

> vec <- rnorm(n = 10, mean = 2, sd = 1)
> round(vec, 2)
 [1] 1.44 1.77 3.56 2.07 2.13 3.72 2.46 0.73 1.31 1.55

> (indexes <- which(vec > 2))
[1] 3 4 5 6 7

> round(vec[indexes], 3)
[1] 3.559 2.071 2.129 3.715 2.461

\end{verbatim}

\end{itemize}

\end{frame}

\begin{frame}[fragile]
\frametitle{The \textit{which} Function}

\begin{verbatim}
> set.seed(123)

> vec2 <- rpois(n = 10, lambda = 2)
> which(vec2 == 2)
[1]  3  7  9 10

> (vec2 <- rpois(n = 10, lambda = 2)) 
 [1] 1 3 2 4 4 0 2 4 2 2
 
> which(vec2 == 2)
[1]  3  7  9 10

\end{verbatim} 
\end{frame}

\begin{frame}[fragile]
\frametitle{The \textit{which} Function}

\begin{verbatim}
> set.seed(123)

> vec2 <- rpois(n = 10, lambda = 2)
> vec2
 [1] 1 3 2 4 4 0 2 4 2 2

> max(vec2)
[1] 4

> which(vec2 == max(vec2))
[1] 4 5 8
\end{verbatim} 
\end{frame}

\begin{frame}[fragile]
\frametitle{The \textit{which} Function}

\begin{itemize}

\item The \textit{which} function gives the positions of the elements of the vectors that verify the condition, not their values!

\begin{verbatim}
> set.seed(123)

> vec2 <- rpois(n = 10, lambda = 2)
> vec2
 [1] 1 3 2 4 4 0 2 4 2 2
\end{verbatim} 

\item What are the actual values of \textit{vec2} (not their positions) that verify the condition?

\begin{verbatim}
> vec2[which(vec > 1)]
[1] 3 2 4 4 2 4 2 2
\end{verbatim} 

\end{itemize}

\end{frame}

\begin{frame}[fragile] %%%%%%%%%%%%%%%%%%%%%%%% FRAME
\frametitle{The \textit{length} Function}
\begin{verbatim}
> round(vec[which(vec > 2)], 3)
[1] 3.559 2.071 2.129 3.715 2.461
\end{verbatim}

\begin{itemize}

\item  Use \textit{length()} to obtain the number of elements in a vector:

\begin{verbatim}
> length(vec)
[1] 4
\end{verbatim}

\item How many elements of \textit{vec} are greater than 2?

\begin{verbatim}
> length(which(vec > 1)])
[1] 2
\end{verbatim}

\end{itemize}

\end{frame}

\begin{frame}[fragile]
\frametitle{Trigonometric Functions}
\begin{itemize}
\item R trigonometric take radians as argument, not degrees:

\begin{itemize}
\item $\operatorname{sin}(\frac{\pi}{2})$:
\begin{verbatim}
> sin(pi/2)
[1] 1
\end{verbatim}

\item $\operatorname{cos}(\pi)$:
\begin{verbatim}
> cos(pi)
[1] -1
\end{verbatim}

\item $\operatorname{tan}(\frac{\pi}{3})$:
\begin{verbatim}
>tan(pi/3)
[1] 1.732051
\end{verbatim}

\item $\operatorname{cotangent}(\frac{\pi}{3})$:
\begin{verbatim}
>1/tan(pi/3)
[1] 0.5773503
\end{verbatim}

\end{itemize}

\end{itemize}
\end{frame}


\begin{frame}[fragile]
\frametitle{Trigonometric Functions}

\begin{itemize}
\item Which value has a cosine = -1?

\begin{verbatim}
> acos(-1)
[1] 3.141593

\end{verbatim}

\item Which value has a tangent = 0.5? 

\begin{verbatim}
> atan(0.5)
[1] 0.4636476

> tan(0.4636476)
[1] 0.5
\end{verbatim}

\end{itemize}

\end{frame}

\begin{frame}[fragile]
\frametitle{Trigonometric Functions}

\begin{itemize}

\item Trigonometric functions are also vectorized:

\begin{verbatim}
> (x <- seq(from = 0.25, to = 1, by = 0.25))
[1] 0.25 0.50 0.75 1.00

> cos(x)
[1] 0.9689124 0.8775826 0.7316889 0.5403023

> 1/tan(x) # cotangent of x
[1] 3.9163174 1.8304877 1.0734261 0.6420926

> cos(x)/sin(x) # cotangent of x
[1] 3.9163174 1.8304877 1.0734261 0.6420926
\end{verbatim}

\end{itemize}

\end{frame}

\begin{frame}[fragile]
\frametitle{Trigonometric Functions}

\begin{itemize}

\item R has many more trigonometric functions. Try:

\begin{verbatim}
> ?Trig
\end{verbatim}

\end{itemize}

\end{frame}

\subsection{Recycling}


\begin{frame}[fragile]
\frametitle{Recycling}
\begin{itemize}

\item What happens when we conduct calculations with two vectors of different length?
\begin{verbatim}

> myvec <- c(1, 2, 3, 4) 
> myvec2 <- rep(0.5, times = 8)

> myvec + myvec2
[1] 1.5 2.5 3.5 4.5 1.5 2.5 3.5 4.5

\end{verbatim}
\end{itemize}

\end{frame}

\begin{frame}[fragile] %%%%%%%%%%%%%%%%%%%%%%% FRAME %%%%%%%%%%%%%%%%%%
\frametitle{Recycling}
\begin{verbatim}

> myvec3 <- rep(0.5, times = 7)

> myvec + myvec3

[1] 1.5 2.5 3.5 4.5 1.5 2.5 3.5

Warning message:
In myvec + myvec3 :
longer object length is not a multiple of shorter
object length
  
\end{verbatim}
\end{frame}

\begin{frame}
\frametitle{Recycling}
\begin{itemize}
\item  When conducting operations that require input vectors to be of the same length, R automatically recycles, or repeats, the shorter one, until it is long enough to match the longer one.
\item  It will only throw an error message if the length of the shorter vector is not a multiple of the vector of the larger vector.
\end{itemize}

\end{frame}

\subsection{Named Vectors}

\begin{frame}[fragile]
\frametitle{Vectors Names}
\begin{itemize}
\item We can also name the elements of a vector:

\begin{verbatim}
> x <- c(x1 = 1, x2 =  4, x3 = 7)
> x

x1 x2 x3 
 1  4  7 
\end{verbatim}
\item Get the names of a vector:

\begin{verbatim}
> names(x)
[1] "x1" "x2" "x3"
\end{verbatim}
\end{itemize}

\end{frame}

\begin{frame}[fragile]
\frametitle{Vectors Names}

\begin{itemize}
\item The \textit{names} function can also be used to provide names to a vector:

\begin{verbatim}

> y <- 1:3
> names(y) <- c("y1", "y2", "y3")

> y
y1 y2 y3 
 1  2  3 

\end{verbatim}
\end{itemize}
\end{frame}

\begin{frame}[fragile]
\frametitle{Subsetting Named Vectors}

\begin{itemize}
\item Vectors can also be subseted by name:

\begin{verbatim}
> y
y1 y2 y3 
 1  2  3 
 
> y["y1"]
y1 
 1 
 
> y[c("y1", "y3")]
y1 y3 
 1  3 
\end{verbatim}
\end{itemize}

\end{frame}


\begin{frame}[fragile]
\frametitle{The \textit{paste} and \textit{paste0} functions}
\begin{itemize}
\item \textit{paste} and \textit{paste0} can be useful to generate vector names:

\begin{verbatim}
> paste("y", 1:length(y), sep = "")
[1] "y1" "y2" "y3"

> paste("name", 1:length(y), sep = "_")
[1] "name_1" "name_2" "name_3"

> paste("year", 1990:1993, sep = "-")
[1] "year-1990" "year-1991" "year-1992" "year-1993"

> paste0("X", 1:5)
[1] "X1" "X2" "X3" "X4" "X5"
\end{verbatim}
\end{itemize}

\end{frame}

\section*{}

\begin{frame}[fragile] %%%%%%%%%%%%%%%%%%%%%%% FRAME %%%%%%%%%%%%%%%%%%%%%%%%%%%%
\frametitle{Questions?}

\begin{flushleft}“The man who asks a question is a fool for a minute, the man who does not ask is a fool for life.”\end{flushleft}\begin{flushright}
― Confucius
\end{flushright}

\end{frame}


\end{document}

